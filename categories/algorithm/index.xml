<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on wPv的个人小站</title>
    <link>https://wpv-chan.github.io/categories/algorithm/</link>
    <description>Recent content in Algorithm on wPv的个人小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://wpv-chan.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树总结（一）</title>
      <link>https://wpv-chan.github.io/p/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wpv-chan.github.io/p/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>二叉树算法设计总路线 void traverse(TreeNode root) { // root TO DO  traverse(root.left); traverse(root.right); } 一些小坑  BST（二叉搜索树）的合法性  // 常见错法  boolean isValidBST(TreeNode root) { if(root == null) return true; if(root.left != null &amp;amp;&amp;amp; root.val &amp;lt;= root.left.val) return false; if(root.right != null &amp;amp;&amp;amp; root.val &amp;gt;= rot.right.val) return false; return isValidBST(root.left) &amp;amp;&amp;amp; isValidBST(root.right); }  BST要求整棵树的左边比右边小，而不是单颗树的左边比右边小
 // 正确做法，增加参数列表加判断  boolean isValidBST(TreeNode root, TreeNode min, TreeNode max) { if(root == null) return true; if(min !</description>
    </item>
    
    <item>
      <title>LFU内存淘汰算法的简单实现</title>
      <link>https://wpv-chan.github.io/p/lfu%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wpv-chan.github.io/p/lfu%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>LFU: Least Frequently Used  class LFUCLass { // mapping from key to val, KV chart  HashMap&amp;lt;Integer, Interger&amp;gt; keyToVal; // mapping from key to freq, KF chart  HashMap&amp;lt;Integer, Interger&amp;gt; keyToFreq; // mapping from freq to key, FK chart  HashMap&amp;lt;Integer, Interger&amp;gt; freqToKeys; // logging the least freq  int minFreq; // logging the largest col of LFU cache  int cap; public LFUCache(int capacity) { keyToVal = new HashMap&amp;lt;&amp;gt;(); keyToFreq = new HashMap&amp;lt;&amp;gt;(); freqToKeys = new HashMap&amp;lt;&amp;gt;(); this.</description>
    </item>
    
    <item>
      <title>动态规划总结（一）</title>
      <link>https://wpv-chan.github.io/p/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wpv-chan.github.io/p/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>子序列问题的两种思路  一维dp数组
 int n = array.length; int[] dp = new int[n]; for(int i = 1; i &amp;lt; n; i++) { for(int j = 0; j &amp;lt; i; j++) { dp[i] = max(dp[i], dp[j] + ...) // min(dp[i], dp[j] + ...)  } }  最长递增子序列   二维dp数组
 int n = array.length; int[][] dp = new dp[n][n]; for(int i = 1; i &amp;lt; n; i++) { for(int j = 0; j &amp;lt; i; j++) { if(arr[i] == arr[j]) { dp[i][j] = dp[i][j] + .</description>
    </item>
    
    <item>
      <title>编辑距离问题</title>
      <link>https://wpv-chan.github.io/p/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wpv-chan.github.io/p/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E9%97%AE%E9%A2%98/</guid>
      <description>参考《labuladong的算法小抄》
问题描述  如果可以对一个字符串进行三种操作：插入一个字符，删除一个字符，替换一个字符。 现在给你两个字符串s1和s2，求最少需要多少次操作可以把s1转换成s2。  思路分析   解决两个字符串的问题，都可以用两个指针i和j分别只想两个字符串的最后，一步一步往前移动，以缩小问题规模
  根据实际情况进行字符的插入，删除，替换以及适当地skip
  if s1[i] == s2[j]: #啥都别做（skip） #同时两个指针向前移动 else: #insert #delete #replace 代码示例 def minDistance(s1, s2) -&amp;gt; int: def dp(i, j) -&amp;gt; int: #定义dp(i, j)为s1[0...i]和s2[0...j]的最小编辑距离 #base case if i == -1: return j+1 if j == -1: return i+1 #做选择 if s1[i] == s2[j]: return dp(i - 1, j - 1) #相等就不用操作，所以不用加一直接前进 else: return min( dp(i, j - 1) + 1, #插入 #直接在s1[i]中插入一个和s2[j]一样的字符 #那么s2[j]就被匹配了，前移j，继续和i做对比 #别忘了操作数加一 dp(i - 1, j) + 1, #删除 #直接把s1[i]这个字符删除 #前移i，继续和j对比 #别忘了操作数加一 dp(i - 1, j - 1) + 1 #替换 #直接把s1[i]替换成s2[j]，这样它俩就匹配了 #同时前移i，j继续做对比 #别忘了操作数加一 ) return dp(len(s1) - 1, len(s2) - 1) 使用DP table进行重叠子问题优化 这是个一个DP table</description>
    </item>
    
  </channel>
</rss>
